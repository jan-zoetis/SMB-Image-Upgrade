set GRUB_DISABLE_LINUX_UUID true
insmod part_msdos
set root='hd0,msdos1'
set prefix='(hd0,msdos1)/grub/'
# boot the first defined menu
set default="0"
# don't show menu by default
set timeout="0"

# Users and passwords. Can use encrypted passwords also.
# user: "root" pass: "smb"  gets full access (menu editing and commandline)
# user: "smb"  pass: "smb"  can boot recovery USB
# No user required to boot default system
set superusers="root"
#password root smb
#password smb smb


## Tried to make grub quiet by using a serial console, but BIOS clears the splash screen, so this didn't work out
#serial --unit=1 --speed=19200
#terminal_output serial

insmod vbe
#insmod vga # Enable if VESA is not supported by future hardware
#insmod png # enable for png format splash screens (I'm using tga, since had mixed success with png)
insmod tga

# Figure-out graphics resolution automatically (can change to 640x480x<depth>)
set gfxmode=auto
# The resolution for the Linux kernel: keep the GRUB screen mode
set gfxpayload=keep

insmod gfxterm
terminal_output gfxterm
#background_image /background.tga
background_image /test.tga
# Should get the graphical output now, but nothing is shown until some change in foreground is made
# A hack: put space on the screen draws the background
insmod echo
echo -n

# If shift, ctrl & alt are pressed, give user a chance to get into menu (need to hit any key during 4 sec.) 
#if keystatus --shift --ctrl --alt ; then
	#set timeout="4"
	# Use a themed menu:
	# This needs a cropped version of the background in the middle, to use as a background of the terminal part
	# The middle image can be obtained with the ImageMagic
	# convert background.tga -crop 446x334+96+72 +repage -gravity NorthWest -extent 640x480 middle.tga
	#insmod gfxmenu
	#background_image /middle.tga
	#set theme=/grub_theme/theme.txt
#fi




insmod ext2
insmod gzio

## Simple setup with single ROOTFS
menuentry "Normal operation" {
	# load the kernel description for the default boot
	set root='(hd0,msdos2)'
	configfile /boot/linux.cfg
}

## Untested sketch of setup for two rootfs.
# If /mnt/boot/fs2_default file is present, boot the rootfs2 by default (first menu entry), else the rootfs1.
# The alternative filesystem can also be selected from menu. (could use the grubenv instead of fs2_default file for decision)
# if [ -e (hd0,msdos1)/fs2_default ]; then
# 	set default_rootfs=(hd0,msdos3)
# 	set alternative_rootfs=(hd0,msdos2)
# else
# 	set default_rootfs=(hd0,msdos3)
# 	set alternative_rootfs=(hd0,msdos2)
# fi
#  
# Load the default system menu entry (if present)
# if [ -e "${default_rootfs}/boot/linux.cfg" ]; then
#	menuentry "Normal operation (version ${root})" {
# 		set root="${default_rootfs}"
# 		configfile /boot/linux.cfg
#	}
# fi
# 
# Load the menu entry for alternative system (if present)
# if [ -e "${alternative_rootfs}/boot/linux.cfg" ]; then
#	menuentry "Previous version (version ${root})" {
# 		set root="${alternative_rootfs}"
# 		configfile /boot/linux.cfg
#	}
# fi

# Recovery USB (not tested on device), Will ask to login, and will accept "smb" or "admin" user
#menuentry "Recovery USB" --users "smb" {
    # To load from MBR on the USB:
#    set root='(hd1)'
#    drivemap -s hd0 hd1 # Optional, depends if bootloader on USB thinks it is first or second drive
#    chainloader (hd1)+1
    ## To load from the first partition on the USB (like syslinux):
    #set root='(hd1,1)'
    #drivemap -s hd0 hd1 # Optional, depends if bootloader on USB thinks it is first or second drive
    #chainloader +1
#}

